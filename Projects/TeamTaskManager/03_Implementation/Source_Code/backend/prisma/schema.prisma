generator client {
  provider      = "prisma-client-js"
  output        = "../generated/prisma"
  binaryTargets = ["native", "linux-arm64-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Project {
  id            String          @id
  name          String
  description   String?
  status        ProjectStatus   @default(ACTIVE)
  startDate     DateTime?
  endDate       DateTime?
  tags          String[]        @default([])
  ownerId       String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  users         users           @relation(fields: [ownerId], references: [id])
  ProjectInvite ProjectInvite[]
  ProjectMember ProjectMember[]
  Task          Task[]

  @@index([ownerId])
}

model ProjectInvite {
  id                                     String       @id
  projectId                              String
  email                                  String
  userId                                 String?
  role                                   ProjectRole  @default(MEMBER)
  status                                 InviteStatus @default(PENDING)
  invitedById                            String
  invitedAt                              DateTime     @default(now())
  expiresAt                              DateTime?
  users_ProjectInvite_invitedByIdTousers users        @relation("ProjectInvite_invitedByIdTousers", fields: [invitedById], references: [id])
  Project                                Project      @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users_ProjectInvite_userIdTousers      users?       @relation("ProjectInvite_userIdTousers", fields: [userId], references: [id])

  @@unique([projectId, email])
}

model ProjectMember {
  id        String      @id
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime    @default(now())
  Project   Project     @relation(fields: [projectId], references: [id], onDelete: Cascade)
  users     users       @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
}

model Task {
  id                            String           @id
  title                         String
  description                   String?
  status                        TaskStatus       @default(TODO)
  priority                      TaskPriority     @default(MEDIUM)
  dueDate                       DateTime?
  assigneeId                    String?
  projectId                     String?
  createdById                   String
  createdAt                     DateTime         @default(now())
  updatedAt                     DateTime
  users_Task_assigneeIdTousers  users?           @relation("Task_assigneeIdTousers", fields: [assigneeId], references: [id])
  users_Task_createdByIdTousers users            @relation("Task_createdByIdTousers", fields: [createdById], references: [id])
  Project                       Project?         @relation(fields: [projectId], references: [id], onDelete: Cascade)
  TaskAttachment                TaskAttachment[]
  TaskComment                   TaskComment[]
  TimeEntry                     TimeEntry[]

  @@index([projectId])
}

model TaskAttachment {
  id           String   @id
  taskId       String
  fileName     String
  fileSize     Int
  fileType     String
  fileUrl      String
  uploadedById String
  uploadedAt   DateTime @default(now())
  Task         Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users        users    @relation(fields: [uploadedById], references: [id])

  @@index([taskId])
}

model TaskComment {
  id        String   @id
  taskId    String
  content   String
  authorId  String
  createdAt DateTime @default(now())
  updatedAt DateTime
  users     users    @relation(fields: [authorId], references: [id])
  Task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@index([taskId])
}

model TimeEntry {
  id          String    @id
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime
  Task        Task      @relation(fields: [taskId], references: [id], onDelete: Cascade)
  users       users     @relation(fields: [userId], references: [id])

  @@index([taskId, userId])
}

model audit_logs {
  id         String   @id
  user_id    String?
  action     String
  resource   String?
  details    Json?
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  severity   String?
}

model password_reset_requests {
  id         String   @id
  user_id    String
  token      String   @unique
  expires_at DateTime
  used       Boolean  @default(false)
  ip_address String?
  user_agent String?
  created_at DateTime @default(now())
  users      users    @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model permissions {
  id          String  @id
  resource    String
  action      String
  description String?

  @@unique([resource, action])
}

model roles {
  id          String       @id
  name        String       @unique
  description String?
  permissions Json
  created_at  DateTime     @default(now())
  user_roles  user_roles[]
}

model token_blacklist {
  id         String   @id
  token_hash String   @unique
  expires_at DateTime
  reason     String?
  created_at DateTime @default(now())
}

model user_roles {
  id          String   @id
  user_id     String
  role_id     String
  scope       String
  scope_id    String?
  assigned_by String?
  assigned_at DateTime @default(now())
  roles       roles    @relation(fields: [role_id], references: [id], onDelete: Cascade)
  users       users    @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@unique([user_id, role_id, scope, scope_id])
}

model user_sessions {
  id                    String    @id
  user_id               String
  session_token         String    @unique
  refresh_token         String    @unique
  ip_address            String?
  user_agent            String?
  device_info           Json?
  location_info         Json?
  access_token_expires  DateTime
  refresh_token_expires DateTime
  token_refreshed_at    DateTime?
  is_active             Boolean   @default(true)
  last_activity         DateTime  @default(now())
  expires_at            DateTime
  created_at            DateTime  @default(now())
  users                 users     @relation(fields: [user_id], references: [id], onDelete: Cascade)
}

model users {
  id                                             String                    @id
  email                                          String                    @unique
  password_hash                                  String
  first_name                                     String
  last_name                                      String
  profile_picture_url                            String?
  email_verified                                 Boolean                   @default(false)
  verification_token                             String?
  verification_token_expires                     DateTime?
  reset_token                                    String?
  reset_token_expires                            DateTime?
  password_changed_at                            DateTime?
  last_login                                     DateTime?
  failed_login_attempts                          Int                       @default(0)
  locked_until                                   DateTime?
  created_at                                     DateTime                  @default(now())
  updated_at                                     DateTime                  @updatedAt
  Project                                        Project[]
  ProjectInvite_ProjectInvite_invitedByIdTousers ProjectInvite[]           @relation("ProjectInvite_invitedByIdTousers")
  ProjectInvite_ProjectInvite_userIdTousers      ProjectInvite[]           @relation("ProjectInvite_userIdTousers")
  ProjectMember                                  ProjectMember[]
  Task_Task_assigneeIdTousers                    Task[]                    @relation("Task_assigneeIdTousers")
  Task_Task_createdByIdTousers                   Task[]                    @relation("Task_createdByIdTousers")
  TaskAttachment                                 TaskAttachment[]
  TaskComment                                    TaskComment[]
  TimeEntry                                      TimeEntry[]
  password_reset_requests                        password_reset_requests[]
  user_roles                                     user_roles[]
  user_sessions                                  user_sessions[]
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}
