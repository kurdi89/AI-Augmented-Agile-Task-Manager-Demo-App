// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model users {
  id            String   @id @default(uuid())
  email         String   @unique
  password_hash String
  first_name    String
  last_name     String
  created_at    DateTime @default(now())
  updated_at    DateTime @updatedAt

  // Relations
  created_tasks     Task[]
  assigned_tasks    Task[]
  project_members   ProjectMember[]
  project_invites   ProjectInvite[]
  uploaded_files    TaskAttachment[]
  task_comments     TaskComment[]
  time_entries      TimeEntry[]
  owned_projects    Project[]
}

model project {
  id          String        @id @default(uuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  start_date  DateTime?
  end_date    DateTime?
  tags        String        @default("[]") // JSON string
  owner_id    String
  created_at  DateTime      @default(now())
  updated_at  DateTime      @updatedAt

  // Relations
  owner       users            @relation(fields: [owner_id], references: [id])
  members     ProjectMember[]
  invites     ProjectInvite[]
  tasks       Task[]
}

model project_member {
  id         String      @id @default(uuid())
  project_id String
  user_id    String
  role       ProjectRole @default(MEMBER)
  joined_at  DateTime    @default(now())

  // Relations
  project project @relation(fields: [project_id], references: [id])
  user    users   @relation(fields: [user_id], references: [id])

  @@unique([project_id, user_id])
}

model project_invite {
  id           String       @id @default(uuid())
  project_id   String
  email        String
  user_id      String?
  role         ProjectRole  @default(MEMBER)
  status       InviteStatus @default(PENDING)
  invited_by   String
  invited_at   DateTime     @default(now())
  expires_at   DateTime?

  // Relations
  project    project @relation(fields: [project_id], references: [id])
  user       users?  @relation(fields: [user_id], references: [id])
  inviter    users   @relation(fields: [invited_by], references: [id])
}

model task {
  id            String      @id @default(uuid())
  title         String
  description   String?
  status        TaskStatus  @default(TODO)
  priority      TaskPriority @default(MEDIUM)
  due_date      DateTime?
  assignee_id   String?
  project_id    String?
  created_by    String
  created_at    DateTime    @default(now())
  updated_at    DateTime    @updatedAt

  // Relations
  assignee      users?           @relation("assigned_tasks", fields: [assignee_id], references: [id])
  creator       users            @relation("created_tasks", fields: [created_by], references: [id])
  project       project?         @relation(fields: [project_id], references: [id])
  attachments   TaskAttachment[]
  comments      TaskComment[]
  time_entries  TimeEntry[]
}

model task_attachment {
  id           String   @id @default(uuid())
  task_id      String
  file_name    String
  file_size    Int
  file_type    String
  file_url     String
  uploaded_by  String
  uploaded_at  DateTime @default(now())

  // Relations
  task      task @relation(fields: [task_id], references: [id])
  uploader  users @relation(fields: [uploaded_by], references: [id])
}

model task_comment {
  id        String   @id @default(uuid())
  task_id   String
  content   String
  author_id String
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  // Relations
  task   task  @relation(fields: [task_id], references: [id])
  author users @relation(fields: [author_id], references: [id])
}

model time_entry {
  id          String    @id @default(uuid())
  task_id     String
  user_id     String
  description String?
  start_time  DateTime
  end_time    DateTime?
  duration    Int?      // in minutes
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt

  // Relations
  task task @relation(fields: [task_id], references: [id])
  user users @relation(fields: [user_id], references: [id])
}

enum TaskStatus {
  TODO
  IN_PROGRESS
  COMPLETED
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
} 