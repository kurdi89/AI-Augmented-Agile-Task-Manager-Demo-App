// Team Task Manager - Database Schema
// Sprint 1: Authentication & User Management
// Sprint 2: Task & Project Management
// Created: July 6, 2025

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User Management (Sprint 1)
model User {
  id              String   @id @default(cuid())
  email           String   @unique
  firstName       String
  lastName        String
  displayName     String
  profilePicture  String?
  passwordHash    String
  isEmailVerified Boolean  @default(false)
  phoneNumber     String?
  dateOfBirth     DateTime?
  bio             String?
  location        String?
  website         String?
  isActive        Boolean  @default(true)
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  lastLoginAt     DateTime?

  // Relationships
  roles           UserRole[]
  sessions        Session[]
  auditLogs       AuditLog[]
  
  // Task Management (Sprint 2)
  assignedTasks   Task[]   @relation("TaskAssignee")
  createdTasks    Task[]   @relation("TaskCreator")
  projectMembers  ProjectMember[]
  taskComments    TaskComment[]
  taskAttachments TaskAttachment[]
  
  // Project Management (Sprint 2)
  ownedProjects   Project[] @relation("ProjectOwner")
  projectInvites  ProjectInvite[] @relation("InvitedUser")

  @@map("users")
}

// Role Management (Sprint 1)
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Permission[]
  userRoles   UserRole[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("roles")
}

model UserRole {
  id        String   @id @default(cuid())
  userId    String
  roleId    String
  assignedAt DateTime @default(now())
  assignedBy String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  role      Role     @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model Permission {
  id          String   @id @default(cuid())
  resource    String
  action      String
  description String?
  roles       Role[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@unique([resource, action])
  @@map("permissions")
}

// Session Management (Sprint 1)
model Session {
  id           String   @id @default(cuid())
  userId       String
  sessionId    String   @unique
  deviceInfo   Json
  ipAddress    String
  location     String?
  isActive     Boolean  @default(true)
  isCurrent    Boolean  @default(false)
  lastActivity DateTime @default(now())
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Audit Logging (Sprint 1)
model AuditLog {
  id        String   @id @default(cuid())
  userId    String
  action    String
  resource  String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("audit_logs")
}

// Task Management (Sprint 2)
model Task {
  id          String   @id @default(cuid())
  title       String
  description String?
  status      TaskStatus @default(TODO)
  priority    TaskPriority @default(MEDIUM)
  dueDate     DateTime?
  estimatedHours Float?
  actualHours   Float?
  
  // Relationships
  projectId   String
  project     Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  
  assigneeId  String?
  assignee    User?   @relation("TaskAssignee", fields: [assigneeId], references: [id])
  
  creatorId   String
  creator     User    @relation("TaskCreator", fields: [creatorId], references: [id])
  
  parentTaskId String?
  parentTask   Task?   @relation("SubTasks", fields: [parentTaskId], references: [id])
  subTasks     Task[]  @relation("SubTasks")
  
  // Task Details
  tags        String[] // Array of tag strings
  labels      String[] // Array of label strings
  attachments TaskAttachment[]
  comments    TaskComment[]
  timeEntries TimeEntry[]
  
  // Metadata
  isArchived  Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  completedAt DateTime?

  @@map("tasks")
}

// Project Management (Sprint 2)
model Project {
  id          String   @id @default(cuid())
  name        String
  description String?
  status      ProjectStatus @default(ACTIVE)
  
  // Project Details
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  color       String? // Hex color for project identification
  
  // Relationships
  ownerId     String
  owner       User    @relation("ProjectOwner", fields: [ownerId], references: [id])
  
  members     ProjectMember[]
  tasks       Task[]
  invites     ProjectInvite[]
  
  // Metadata
  isArchived  Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("projects")
}

model ProjectMember {
  id        String   @id @default(cuid())
  projectId String
  userId    String
  role      ProjectRole @default(MEMBER)
  joinedAt  DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)
  user      User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([projectId, userId])
  @@map("project_members")
}

model ProjectInvite {
  id        String   @id @default(cuid())
  projectId String
  email     String
  role      ProjectRole @default(MEMBER)
  status    InviteStatus @default(PENDING)
  invitedBy String
  invitedUser User? @relation("InvitedUser", fields: [email], references: [email])
  expiresAt DateTime
  createdAt DateTime @default(now())
  
  project   Project @relation(fields: [projectId], references: [id], onDelete: Cascade)

  @@unique([projectId, email])
  @@map("project_invites")
}

// Task Attachments (Sprint 2)
model TaskAttachment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  fileName  String
  fileSize  Int
  fileType  String
  fileUrl   String
  createdAt DateTime @default(now())
  
  task      Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id])

  @@map("task_attachments")
}

// Task Comments (Sprint 2)
model TaskComment {
  id        String   @id @default(cuid())
  taskId    String
  userId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  
  task      Task @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user      User @relation(fields: [userId], references: [id])

  @@map("task_comments")
}

// Time Tracking (Sprint 2)
model TimeEntry {
  id          String   @id @default(cuid())
  taskId      String
  userId      String
  description String?
  startTime   DateTime
  endTime     DateTime?
  duration    Int? // Duration in minutes
  isRunning   Boolean @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  task        Task @relation(fields: [taskId], references: [id], onDelete: Cascade)

  @@map("time_entries")
}

// Enums
enum TaskStatus {
  TODO
  IN_PROGRESS
  REVIEW
  DONE
  CANCELLED
}

enum TaskPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum ProjectStatus {
  ACTIVE
  ON_HOLD
  COMPLETED
  CANCELLED
}

enum ProjectRole {
  OWNER
  ADMIN
  MEMBER
  VIEWER
}

enum InviteStatus {
  PENDING
  ACCEPTED
  DECLINED
  EXPIRED
} 